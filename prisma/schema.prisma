// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  VISITOR
  ORGANISER
}

enum Sex {
  MALE
  FEMALE
}

enum SocialPlatform {
  FACEBOOK
  INSTAGRAM
  YOUTUBE
  WEBSITE
}

model user {
  userId            String         @id @default(auto()) @map("_id") @db.ObjectId
  userName          String?
  fullName          String?
  bgId              String?        @db.ObjectId
  email             String         @unique
  cityId            String?        @db.ObjectId
  role              Role           @default(VISITOR)
  password          String
  bio               String?
  phone             String?
  sex               Sex?
  avatar            String?
  idFrontPic        String?
  idBackPic         String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  deletedAt         DateTime?
  categoryId        String?        @db.ObjectId
  city              city?          @relation(fields: [cityId], references: [cityId])
  category          category?      @relation(fields: [categoryId], references: [categoryId])
  background        background?    @relation(fields: [bgId], references: [bgId])
  degree            degree[]
  bank              bank[]
  userTags          userTags[]
  ticket            ticket[]
  activity          activity[]
  saveAct           saveAct[]
  review            review[]
  repportAct        repportAct[]
  post              post[]
  likes             likes[]
  savePost          savePost[]
  comment           comment[]
  followers         follow[]       @relation("followers")
  following         follow[]       @relation("following")
  message_from      message[]      @relation("message_from")
  message_to        message[]      @relation("message_to")
  notification_from notification[] @relation("notification_from")
  notification_to   notification[] @relation("notification_to")
  repportPost       repportPost[]
  repport_from      repportUser[]  @relation("repport_from")
  repport_to        repportUser[]  @relation("repport_to")
  socials           socials[]

  reset reset[]
  share share[]

  @@index([userName])
}

model socials {
  socialId String         @id @default(auto()) @map("_id") @db.ObjectId
  link     String
  platform SocialPlatform
  userId   String         @db.ObjectId
  user     user?          @relation(fields: [userId], references: [userId])

  @@unique([userId, platform])
}

model degree {
  degreeId         String  @id @default(auto()) @map("_id") @db.ObjectId
  degreeName       String?
  school           String?
  year             Int?
  frontPic         String?
  backPic          String?
  verified         Boolean @default(false)
  justification    String?
  justificationPic String?
  userId           String  @db.ObjectId
  user             user    @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model bank {
  bankId         String @id @default(auto()) @map("_id") @db.ObjectId
  fullName       String
  cardNumber     String @unique
  expDate        String
  cvvlast4Digits String
  userId         String @db.ObjectId
  user           user   @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model category {
  categoryId   String     @id @default(auto()) @map("_id") @db.ObjectId
  categoryName String     @unique
  icon         String
  deletedAt    DateTime?
  user         user[]
  tag          tag[]
  activity     activity[]
  post         post[]
}

model tag {
  tagId        String         @id @default(auto()) @map("_id") @db.ObjectId
  tagName      String         @unique
  deletedAt    DateTime?
  categoryId   String         @db.ObjectId
  category     category       @relation(fields: [categoryId], references: [categoryId], onDelete: Cascade)
  userTags     userTags[]
  activityTags activityTags[]
  postTags     postTags[]
}

model city {
  cityId   String     @id @default(auto()) @map("_id") @db.ObjectId
  cityName String     @unique
  cover    String?
  activity activity[]
  user     user[]
}

model activity {
  activityId   String         @id @default(auto()) @map("_id") @db.ObjectId
  coverPic     String
  title        String
  description  String
  startTime    String
  endTime      String
  location     String
  startDay     DateTime?
  endDay       DateTime?
  seat         Int
  cityId       String         @db.ObjectId
  price        Float
  score        Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deletedAt    DateTime?
  userId       String         @db.ObjectId
  user         user           @relation(fields: [userId], references: [userId], onDelete: Cascade)
  categoryId   String         @db.ObjectId
  category     category       @relation(fields: [categoryId], references: [categoryId])
  city         city           @relation(fields: [cityId], references: [cityId], onDelete: Cascade)
  ticket       ticket[]
  saveAct      saveAct[]
  review       review[]
  repportAct   repportAct[]
  activityTags activityTags[]
  share        share[]
}

model post {
  postId      String        @id @default(auto()) @map("_id") @db.ObjectId
  bannerPic   String?
  description String
  likesCount  Int?          @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?
  userId      String        @db.ObjectId
  user        user          @relation(fields: [userId], references: [userId], onDelete: Cascade)
  categoryId  String        @db.ObjectId
  category    category      @relation(fields: [categoryId], references: [categoryId])
  likes       likes[]
  savePost    savePost[]
  comment     comment[]
  postTags    postTags[]
  repportPost repportPost[]
  share       share[]
}

model background {
  bgId String @id @default(auto()) @map("_id") @db.ObjectId
  link String
  type String
  user user[]
}

model reset {
  resetId   String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  expiresAt DateTime
  userId    String   @db.ObjectId
  user      user     @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model userTags {
  userTagsId String @id @default(auto()) @map("_id") @db.ObjectId
  userId     String @db.ObjectId
  tagId      String @db.ObjectId
  user       user   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  tag        tag    @relation(fields: [tagId], references: [tagId], onDelete: Cascade)
}

model ticket {
  ticketId        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @db.ObjectId
  activityId      String   @db.ObjectId
  code            String
  quantity        Int
  paymentIntentId String?
  user            user     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  activity        activity @relation(fields: [activityId], references: [activityId], onDelete: Cascade)
  createdAt       DateTime @default(now())
}

model saveAct {
  saveActId  String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  activityId String   @db.ObjectId
  user       user     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  activity   activity @relation(fields: [activityId], references: [activityId], onDelete: Cascade)
}

model review {
  reviewId   String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  activityId String   @db.ObjectId
  stars      Int
  comment    String
  user       user     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  activity   activity @relation(fields: [activityId], references: [activityId], onDelete: Cascade)
}

model repportAct {
  repportActId String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  activityId   String   @db.ObjectId
  description  String
  status       String
  user         user     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  activity     activity @relation(fields: [activityId], references: [activityId], onDelete: Cascade)
}

model likes {
  likesId String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId
  postId  String @db.ObjectId
  user    user   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  post    post   @relation(fields: [postId], references: [postId], onDelete: Cascade)
}

model savePost {
  savePostId String @id @default(auto()) @map("_id") @db.ObjectId
  userId     String @db.ObjectId
  postId     String @db.ObjectId
  user       user   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  post       post   @relation(fields: [postId], references: [postId], onDelete: Cascade)
}

model comment {
  commentId String @id @default(auto()) @map("_id") @db.ObjectId
  userId    String @db.ObjectId
  postId    String @db.ObjectId
  content   String
  user      user   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  post      post   @relation(fields: [postId], references: [postId], onDelete: Cascade)
}

model activityTags {
  activityTagsId String   @id @default(auto()) @map("_id") @db.ObjectId
  tagId          String   @db.ObjectId
  activityId     String   @db.ObjectId
  tag            tag      @relation(fields: [tagId], references: [tagId], onDelete: Cascade)
  activity       activity @relation(fields: [activityId], references: [activityId], onDelete: Cascade)
}

model postTags {
  postTagId String @id @default(auto()) @map("_id") @db.ObjectId
  tagId     String @db.ObjectId
  postId    String @db.ObjectId
  tag       tag    @relation(fields: [tagId], references: [tagId], onDelete: Cascade)
  post      post   @relation(fields: [postId], references: [postId], onDelete: Cascade)
}

model follow {
  followId    String @id @default(auto()) @map("_id") @db.ObjectId
  followerId  String @db.ObjectId
  followingId String @db.ObjectId
  follower    user   @relation("followers", fields: [followerId], references: [userId], onDelete: Cascade)
  following   user   @relation("following", fields: [followingId], references: [userId], onDelete: Cascade)
}

model message {
  messageId    String   @id @default(auto()) @map("_id") @db.ObjectId
  fromId       String   @db.ObjectId
  toId         String   @db.ObjectId
  content      String
  createdAt    DateTime @default(now())
  message_from user     @relation("message_from", fields: [fromId], references: [userId], onDelete: Cascade)
  message_to   user     @relation("message_to", fields: [toId], references: [userId], onDelete: Cascade)
  read         Boolean  @default(false)
}

model notification {
  notificationId    String   @id @default(auto()) @map("_id") @db.ObjectId
  fromId            String   @db.ObjectId
  toId              String   @db.ObjectId
  content           String
  createdAt         DateTime @default(now())
  notification_from user     @relation("notification_from", fields: [fromId], references: [userId], onDelete: Cascade)
  notification_to   user     @relation("notification_to", fields: [toId], references: [userId], onDelete: Cascade)
}

model repportPost {
  repportPostId String  @id @default(auto()) @map("_id") @db.ObjectId
  userId        String  @db.ObjectId
  postId        String  @db.ObjectId
  description   String?
  status        String
  user          user    @relation(fields: [userId], references: [userId], onDelete: Cascade)
  post          post    @relation(fields: [postId], references: [postId], onDelete: Cascade)
}

model repportUser {
  repportUserId String @id @default(auto()) @map("_id") @db.ObjectId
  repporterId   String @db.ObjectId
  repportingId  String @db.ObjectId
  description   String
  status        String
  repport_from  user   @relation("repport_from", fields: [repporterId], references: [userId], onDelete: Cascade)
  repport_to    user   @relation("repport_to", fields: [repportingId], references: [userId], onDelete: Cascade)
}

// model userBg {
//   userBgId   String     @id @default(auto()) @map("_id") @db.ObjectId
//   userId     String     @db.ObjectId
//   bgId       String     @db.ObjectId
//   user       user       @relation(fields: [userId], references: [userId], onDelete: Cascade)
//   background background @relation(fields: [bgId], references: [bgId], onDelete: Cascade)
// }

model share {
  shareId    String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  activityId String   @db.ObjectId
  postId     String   @db.ObjectId
  user       user     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  activity   activity @relation(fields: [activityId], references: [activityId], onDelete: Cascade)
  post       post     @relation(fields: [postId], references: [postId], onDelete: Cascade)
}

//test younes branch
